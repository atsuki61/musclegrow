---
description: MuscleGrow筋トレ記録アプリのためのグローバルAIアシスタント設定：プロセスガイドライン、プロジェクト技術スタック、コーディング規約
alwaysApply: true
---

# AI タスク実行プロセス（一般ガイドライン）

あなたは高度な問題解決能力を持つ AI アシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>
この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>

   - 主要タスクを簡潔に要約すること
   - 記載された技術スタックを確認し、その制約内での実装方法を検討すること
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください**
   - 重要要件・制約を特定すること
   - 想定課題を列挙すること
   - 実行ステップを細分化し、最適順に並べること

   ### 重複実装の防止（事前チェック）

   実装前に以下の確認を行ってください：

   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複する API エンドポイント
   - 共通化可能な処理の特定

   この分析は以降の全プロセスの基盤。十分に詳細かつ網羅的に行うこと。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください
   - 各ステップ完了時に簡潔な進捗を記録すること
   - **実装完了後は必ずビルドテストを実行し、エラーがあれば即座に修正すること**
   - 実装時の留意点：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置
     - **ビルドエラーの事前防止**: 型安全性、構文チェック、依存関係の確認

---

3. 品質管理と問題対応
   - 各タスクの結果を迅速に検証すること
   - 不具合発生時の対応手順：
     a. 切り分けと原因特定（ログ / デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   - 検証結果の記録フォーマット：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

### ビルドエラー自動検出・修正プロセス（必須）

**コード実装後は必ず以下の手順を実行すること：**

1. **即座ビルドテスト実行**:

   ```bash
   pnpm build
   ```

   - 実装・修正後は必ずビルドコマンドを実行
   - エラーが発生した場合は即座に修正作業に移行

2. **ビルドエラー発生時の自動修正手順**:
   a. **エラー内容の詳細分析**:

   - TypeScript 型エラーの特定と原因分析
   - ESLint エラーの確認と修正方針決定
   - 依存関係エラーの確認

   b. **段階的修正実行**:

   - 型エラー: 適切な型アサーション、型ガード、型定義の修正
   - ESLint エラー: ルールに従ったコード修正
   - 構文エラー: シンタックスエラーの即座修正
   - 依存関係エラー: 必要なパッケージの確認・追加

   c. **修正後の再ビルド確認**:

   - 修正後は必ず再ビルドを実行
   - エラーが解消されるまで繰り返し実行
   - 最大 3 回まで自動修正を試行

3. **ビルド成功の確認**:
   - ビルドが成功するまで作業を完了としない
   - 成功時は「✓ ビルド成功」を明示的に報告
   - エラーが解消できない場合は詳細な原因と対処法を報告

---

4. 最終確認
   - 成果物を全体評価し、当初指示との整合を確認すること
   - 実装機能に重複がないか最終点検すること

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：

   # 実行結果報告

   ## 概要

   [全体の要約を簡潔に記述]

   ## 実行ステップ

   1. [ステップ 1 の説明と結果]
   2. [ステップ 2 の説明と結果]
      ...

   ## 最終成果物

   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）

   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案

   - [気づいた点や改善提案があれば記述]

---

## 重要な注意事項

- 不明点は 作業開始前 に必ず確認を取ること
- 重要な判断はその都度報告し、承認を得ること
- 予期せぬ問題は即時報告し、対応策を提案すること
- **明示的な指示がない変更は行わないこと** 変更が必要と思われる場合は提案・承認後に実施すること
- **UI/UX（レイアウト / 色 / フォント / 間隔など）の変更は原則禁止** 必要時は理由と影響を示し、事前承認を得ること
- **技術スタックのバージョン（API / フレームワーク / ライブラリ等）を勝手に変更しないこと** 必要時は理由を明確化し、承認が下りるまで保留すること
- **【最重要】ビルドエラーの自動修正**: コード実装後は必ず`pnpm build`を実行し、エラーが発生した場合は即座に修正すること。ビルドが成功するまで作業を完了としないこと

---

# プロジェクト: MuscleGrow 筋トレ記録アプリ

## 概要

- **目的**: 筋トレ習慣を可視化し、継続的なモチベーションを提供する Web アプリ
- **コンセプト**: GitHub の草のように「筋トレ習慣を可視化」し、自分の成長を直感的に把握
- **対象ユーザー**: 筋トレを継続したい個人、自分の成長を可視化してモチベを維持したい人

## 技術スタック

- **フレームワーク**: Next.js 15.5.4 (App Router)
- **言語**: TypeScript 5
- **UI**: Tailwind CSS 4 + shadcn/ui
- **データベース**: Supabase (PostgreSQL)
- **認証**: Better Auth (予定)
- **ORM**: Drizzle ORM (予定)
- **パッケージ管理**: pnpm
- **ホスティング**: Vercel

## コーディングスタイル

- **関心の分離**: 再利用可能なコンポーネント設計
- **App Router 規約**: `page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx` などに従う
- **TypeScript**: 厳格な型定義、`any`の使用禁止
- **Tailwind**: ユーティリティファースト、インラインスタイルは避ける
- **モバイルファースト**: スマホアプリ風の UI 設計

## ディレクトリ構造

```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/            # 認証関連ページ
│   ├── dashboard/         # ダッシュボード
│   ├── history/           # 履歴画面
│   ├── profile/           # プロフィール
│   └── layout.tsx         # ルートレイアウト
├── components/            # 共通コンポーネント
│   ├── ui/               # shadcn/ui コンポーネント
│   ├── forms/            # フォーム関連
│   └── charts/           # グラフ関連
├── lib/                  # ユーティリティ
│   ├── utils.ts          # 共通関数
│   └── validations.ts    # バリデーション
├── hooks/                # カスタムフック
├── types/                # TypeScript型定義
└── supabase/             # Supabase設定
    ├── client.ts         # クライアント
    └── server.ts         # サーバー
```

## コア機能実装ルール

### 1. ホーム画面

- Big3（ベンチプレス、スクワット、デッドリフト）の進捗バー表示
- 今日のトレーニング部位表示
- GitHub 風ヒートマップ（部位別カラー）

### 2. 記録機能

- 日付・部位・種目・重量・回数・メモの入力
- バリデーション: 必須項目チェック、数値範囲チェック
- リアルタイム保存（Supabase）

### 3. 履歴・グラフ

- 過去の記録一覧（日別・週別）
- 種目ごとの重量/回数推移グラフ
- フィルタリング機能（部位別、期間別）

### 4. プロフィール

- 身長・体重・体脂肪率・筋肉量の記録
- 目標設定機能
- 体の写真アップロード（Supabase Storage）

## TypeScript 型安全性ルール

### any 禁止ポリシー

- 原則として `any` の使用を禁止
- 例外の場合は対象行に限定した無効化と理由コメントを必須
- 代替案:
  - 不明な値: `unknown`
  - 任意のオブジェクト: `Record<string, unknown>`
  - 外部入力: スキーマバリデーション（Zod）で検証

### エラーハンドリング

```ts
try {
  /* ... */
} catch (e: unknown) {
  if (e instanceof Error) {
    console.error(e.message);
  } else {
    console.error("Unknown error", e);
  }
}
```

## Supabase 連携ルール

### データベース設計

- ユーザーごとのデータ分離（RLS 有効）
- 正規化されたテーブル設計
- 適切なインデックス設定

### 認証フロー

- Better Auth + Supabase Auth 連携
- セッション管理
- プロテクトされたルート

## UI/UX 設計原則

### モバイルファースト

- タッチ操作に最適化
- 直感的なナビゲーション
- 読みやすいフォントサイズ

### 色による視覚的分離

- 部位別カラーコード統一
- 進捗状況の色分け
- アクセシビリティ配慮

### パフォーマンス

- 初期ロード < 3 秒
- 画像最適化
- コード分割

## 重要なプロジェクトファイル

- **ルートレイアウト**: [src/app/layout.tsx](mdc:src/app/layout.tsx)
- **グローバルスタイル**: [src/app/globals.css](mdc:src/app/globals.css)
- **Supabase 設定**: [src/supabase/](mdc:src/supabase/)
- **要件定義**: [docx/要件定義.md](mdc:docx/要件定義.md)

## コミットメッセージ生成ルール

### 自動コミットメッセージ生成

- コードを変更した場合、会話の最後に日本語でコミットメッセージを 3 つ提案
- 可能な範囲で [Conventional Commits](https://www.conventionalcommits.org) の形式にすること
- 例: `feat: 新機能を追加`, `fix: バグを修正`, `docs: ドキュメントを更新`

### コミット粒度の原則

- **原則**: 1 コミット = 1 意図。テスト / ビルドが通る状態を保ち、不要変更は含めない
- **変更ファイルが複数ある場合**: 原則として「ファイル単位」で個別コミットすること
  - 例外: 同一の単一意図に厳密に属する微小変更は 1 コミットにまとめて可（ただしメッセージで範囲を明記）
  - 推奨手順: `git add <file>` → 適切なスコープ付きメッセージで `git commit -m "feat(scope): 内容"` をファイルごとに実行

### 推奨コミット粒度例

- ルート/フッター更新
- レイアウト追加（Header/PageHeader/Footer）
- ページシェル追加（薄い page.tsx）
- コンポーネント追加（UI）
- フック/ユーティリティ追加（ロジック）
- ドキュメント（README.md、要件定義.md）
- 設定ファイル（package.json、tsconfig.json）
- Supabase 設定（migration、schema）

## 回答言語

日本語でお願いします。
